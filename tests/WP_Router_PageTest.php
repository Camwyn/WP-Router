<?php
require_once 'PHPUnit/Framework.php';
require_once dirname( __FILE__ ) . '/../WP_Router_Utility.class.php';
require_once dirname( __FILE__ ) . '/../WP_Router_Page.class.php';
require_once '/usr/lib/mockpress/mockpress.php';

if ( !class_exists('WP_Query') ) {
	class WP_Query {
		public $query_vars = array();
		public $is_404 = FALSE;
		public $is_single = FALSE;
		public $is_singular = FALSE;
		public $is_home = FALSE;
	}
}

/**
 * Test class for WP_Router_Page.
 * Generated by PHPUnit on 2011-05-28 at 22:03:42.
 */
class WP_Router_PageTest extends PHPUnit_Framework_TestCase {
	/**
	 * @var WP_Router_Page
	 */
	protected $page;
	protected $title;
	protected $contents;
	protected $template;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp( ) {
		_set_up_get_posts_response(array(
				'post_type' => 'wp_router_page',
				'post_status' => 'publish',
				'posts_per_page' => 1,
			), array(
			(object)array('ID' => 4),
		));
		$this->title = $this->random_string(20);
		$this->contents = $this->random_string(mt_rand(100, 600));
		$this->template = $this->random_string(mt_rand(0, 100));
		$this->page = $this->get_page($this->contents, $this->title, $this->template);
	}

	private function random_string( $length = 16 ) {
		$chars = 'abcdefghijklmnopqrstuvwxyz ';
		$num_chars = strlen($chars);
		$string = '';
		for ( $i = 0; $i < $length; $i++ ) {
			$string .= $chars[mt_rand(0, $num_chars)];
		}
		return $string;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown( ) {
	}

	private function get_page( $contents = '', $title = '', $template = '' ) {
		$page = new WP_Router_Page($contents, $title, $template);
		//$page = $this->getMock( 'WP_Router_Page', array('get_post_id'), array($contents, $title, $template) );
		return $page;
	}

	public function testEdit_query( ) {
		$query = new WP_Query();
		$query->query_vars = array( 'WP_Route' => $this->random_string(12) );
		$this->page->edit_query($query);
		$this->assertEquals('wp_router_page', $query->query_vars['post_type']);
		$this->assertEquals(4, $query->query_vars['p']);
		$this->assertEquals(FALSE, $query->is_404);
		$this->assertEquals(FALSE, $query->is_home);
		$this->assertEquals(TRUE, $query->is_single);
		$this->assertEquals(TRUE, $query->is_singular);
	}

	public function testSet_post_contents( ) {
		global $pages;
		if ( !$pages ) {
			$pages = array();
		}
		$this->page->set_post_contents(new stdClass());
		$this->assertEquals(array($this->contents), $pages);
	}

	public function testGet_title( ) {
		$title = $this->page->get_title($this->random_string(), 4);
		$this->assertEquals($this->title, $title);
	}

	public function testGet_single_post_title( ) {
		$title = $this->page->get_single_post_title($this->random_string(), (object)array('ID' => 4));
		$this->assertEquals($this->title, $title);
	}

	public function testOverride_template( ) {
		$template = $this->random_string();
		$found_template = $this->page->override_template($template);
		$this->assertEquals($template, $found_template);
		// TODO: implement a mock filesystem and test for found template
	}
}

?>
